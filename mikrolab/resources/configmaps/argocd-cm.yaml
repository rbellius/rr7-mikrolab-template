apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
  namespace: argocd
  labels:
    app.kubernetes.io/managed-by: argocd
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd
data:
  timeout.reconciliation: 15s
  application.resourceTrackingMethod: "annotation+label"
  applicationsetcontroller.enable.new.git.file.globbing: "true"
  resource.ignoreResourceUpdatesEnabled: 'false'
  resource.customizations.health.argoproj.io_Application: |
    hs = {}
    hs.status = "Progressing"
    hs.message = ""
    if obj.status ~= nil then
      if obj.status.health ~= nil then
        hs.status = obj.status.health.status
        if obj.status.health.message ~= nil then
          hs.message = obj.status.health.message
        end
      end
    end
    return hs
  resource.customizations.health.argoproj.io_ApplicationSet: |
    local hs = {}

    if obj.status ~= nil then
      if obj.status.conditions ~= nil then
        for i, condition in pairs(obj.status.conditions) do
          if condition.type == "ErrorOccurred" and condition.status == "True" then
            hs.status = "Degraded"
            hs.message = condition.message
            return hs
          end
        end
        for i, condition in pairs(obj.status.conditions) do
          if condition.type == "ResourcesUpToDate" and condition.status == "False" then
            hs.status = "Degraded"
            hs.message = condition.message
            return hs
          end
        end
        for i, condition in pairs(obj.status.conditions) do
          if condition.type == "RolloutProgressing" and condition.status == "True" then
            hs.status = "Progressing"
            hs.message = condition.message
            return hs
          end
        end
        for i, condition in pairs(obj.status.conditions) do
          if condition.type == "ResourcesUpToDate" and condition.status == "True" then
            hs.status = "Healthy"
            hs.message = condition.message
            return hs
          end
        end
      end
    end

    hs.status = "Progressing"
    hs.message = "Waiting for the status to be reported"
    return hs
  resource.customizations.health.apiextentions.k8s.io_CustomResourceDefinition: |
      local hs = {}

      -- Check if CRD is terminating
      if obj.metadata.deletionTimestamp ~= nil then
          hs.status = "Progressing"
          hs.message = "CRD is terminating"
          return hs
      end

      if obj.status.conditions == nil then
          hs.status = "Progressing"
          hs.message = "Status conditions not found"
          return hs
      end

      if #obj.status.conditions == 0 then
          hs.status = "Progressing"
          hs.message = "Status conditions not found"
          return hs
      end

      local isEstablished
      local conditionMsg = ""

      for _, condition in pairs(obj.status.conditions) do

          -- Check if CRD is terminating
          if condition.type == "Terminating" and condition.status == "True" then
              hs.status = "Progressing"
              hs.message = "CRD is terminating: " .. condition.message
              return hs
          end

          -- Check if K8s has accepted names for this CRD
          if condition.type == "NamesAccepted" and condition.status == "False" then
              hs.status = "Degraded"
              hs.message = "CRD names have not been accepted: " .. condition.message
              return hs
          end

          -- Checking if CRD has violations
          if condition.type == "NonStructuralSchema" and condition.status == "True" then
              hs.status = "Degraded"
              hs.message = "Schema violations found: " .. condition.message
              return hs
          end

          -- Checking if CRD is established
          if condition.type == "Established" and condition.status == "True" then
              isEstablished = true
              conditionMsg = condition.message
          end
      end

      if not isEstablished then
          hs.status = "Degraded"
          hs.message = "CRD is not established"
          return hs
      end

      hs.status = "Healthy"
      hs.message = "CRD is healthy"
      return hs
  resource.customizations.health.cert-manager.io_Certificate: |
    hs = {}
    if obj.status ~= nil then
      if obj.status.conditions ~= nil then
        for i, condition in ipairs(obj.status.conditions) do
          if condition.type == "Ready" and condition.status == "False" then
            hs.status = "Degraded"
            hs.message = condition.message
            return hs
          end
          if condition.type == "Ready" and condition.status == "True" then
            hs.status = "Healthy"
            hs.message = condition.message
            return hs
          end
        end
      end
    end

    hs.status = "Progressing"
    hs.message = "Waiting for certificate"
    return hs